package src.gui.measurementGUI;

import java.util.Arrays;

import javafx.application.Platform;
import javafx.scene.control.Label;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import measurements.Measurements;

/**
 * here all that is needed to measure the emotion of the user is put together.
 * That include a list of buttons with smileys as a representation of the
 * emotion and a slider to show how intense the emotion is.
 * 
 * 
 * 
 * @author mathieu
 * @version 09/27/2018
 *
 */

public class Smileys implements src.gui.elements.Buttons, src.gui.elements.SliderInterface {
	static Measurements m;
	// smileys in unicode
	String[] text = { "\uD83D\uDE00", "\uD83D\uDE21", "\uD83D\uDE31", "\uD83D\uDE2D", "\uD83D\uDE33" };
	String[] tooltip = { "blij", "boos", "bang", "bedroefd", "beschaamd" };
	boolean disable = true;
	VBox sliderBox = new VBox();
	VBox SIBox = new VBox();

	/**
	 * 
	 * @TODO TODO reset the slider back to it's default value everytime a new
	 *       emotion is choosen
	 */
	public void actionButton(String emotie) {
		m.setEmotion(tooltip[Arrays.asList(text).indexOf(emotie)]);
		disable = false;
		// the slider of the entensity is activated here
		Platform.runLater(() -> {
			sliderBox.setDisable(disable);
		});

	}

	/**
	 * from here everything that is needed for the measuring the emotion of the user
	 * is put together in one VBox
	 * 
	 * @return VBox - with
	 */
	public VBox smileys() {
		SIBox.getChildren().addAll(smileysHBox(), sliderVBox());
		return SIBox;
	}

	/**
	 * This method makes a box with the smileys and tooltips in it, couple things to
	 * note<br>
	 * firstly it takes the minimal length of the text and tooltip arrays. Make sure
	 * that both are the same length<br>
	 * secondly make sure that both the text and tooltip are in ordered pairs
	 * 
	 * @return HBox - with all the buttons on
	 */
	public HBox smileysHBox() {
		HBox smileyBox = new HBox();
		// neemt het minst aantal elementen van text en tooltip, zodat er later geen
		// problemen ontstaan
		int minLength = java.lang.Math.min(text.length, tooltip.length);
		for (int i = 0; i < minLength; i++) {
			smileyBox.getChildren().addAll(buttons(text[i], tooltip[i]));
		}

		return smileyBox;

	}

	/**
	 * 
	 * @param obj - sets the right reference to save the data that is generated by
	 *            the used input
	 */
	public static void setMeasurement(Measurements obj) {
		m = obj;
	}

	@Override
	public void actionSlider(int newValue) {
		m.setIntesitity(newValue);
		System.out.println(" value of the intesity slider " + newValue);
		// TODO Auto-generated method stub

	}

	/**
	 * 
	 * @return VBox - with question and a slider to answer it in it
	 */
	private VBox sliderVBox() {
		Label text = new Label("hoe intessief is je gevoel?");
		sliderBox.getChildren().addAll(text, sliders());
		sliderBox.setDisable(disable);

		return sliderBox;
	}

}
